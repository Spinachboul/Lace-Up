// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken       String    @unique
  userId             String
  expires            DateTime
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  fullName           String?
  address            String?
  phoneNumber        String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  userImage          String?
  favouriteSports    String?
  rating             Int?
  slayPoints         Int       @default(0)
  matches            Match[]
  accounts           Account[]
  sessions           Session[]
}

model Match {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  game               String?
  venue              String?
  time               String?
  betFor             String?
  maxPlayers         String?
  createdAt          DateTime  @default(now())
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String
  message            String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model VerificationToken {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier         String
  token              String    @unique
  expires            DateTime
  @@unique([identifier, token])
}
